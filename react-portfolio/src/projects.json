[    
    {
      "id": "1",
      "title": "Advanced CSS Challenge: Professional Portfolio",
      "description": "In this challenge, I built the back end for an application called Note Taker, integrated it with front end, provided in the starter code, and deployed the entire application to Render.",
      "github": "https://github.com/akravt1274/Challenge-Note-Taker",
      "application": "https://challenge-note-taker.onrender.com/",
      "stack": "HTML, CSS, Express.js",
      "image": "/note-taker.png"
    },
    {
      "id": "2",
      "title": "Model-View-Controller (MVC): Tech Blog",
      "description": "I built a CMS-style blog site similar to a Wordpress site, where developers can publish their blog posts and comment on other developers’ posts as well. The app follows the MVC paradigm in its architectural structure, using Handlebars.js as the templating language, Sequelize as the ORM, the bcrypt package to hash passwords, and the express-session and connect-session-sequelize npm packages for authentication.",
      "github": "https://github.com/akravt1274/Challenge-Tech-Blog",
      "application": "https://challenge-tech-blog.onrender.com",
      "stack": "MVC, Handlebars.js, Sequelize, Express-session, Connect-session-sequelize",
      "image": "/tech-blog.png"
    },
    {
      "id": "3",
      "title": "Server-Side APIs Challenge: Weather Dashboard",
      "description": "In this Challenge I built a weather dashboard that runs in the browser and features dynamically updated HTML and CSS.",
      "github": "https://github.com/akravt1274/Challenge-Weather-Dashboard",
      "application": "https://akravt1274.github.io/Challenge-Weather-Dashboard",
      "stack": "HTML, CSS, OpenWeather API",
      "image": "/weather.png"
    },
    {
      "id": "4",
      "title": "Object-Relational Mapping (ORM): E-commerce Back End",
      "description": "I built the back end for an e-commerce site by filling out the API Routes (using started code) to perform RESTful CRUD operations using defined Sequelize models.",
      "github": "https://github.com/akravt1274/Challenge-Ecommerce-Back-End",
      "application": "https://drive.google.com/file/d/1-siKEtjCPut3tggoTtvI983ATKFIsqE7/view",
      "stack": "Express.js, Sequelize, PostgreSQL, ORM",
      "image": ""
    },
    {
      "id": "5",
      "title": "SQL: Employee Tracker",
      "description": " I built a command-line application to manage a company's employee database, using Node.js, Inquirer to interact with a user via the command line, and PostgreSQL database to store data and perform various queries.",
      "github": "https://github.com/akravt1274/Challenge-Employee-Tracker",
      "application": "https://drive.google.com/file/d/1hkolbZtV-snBXK4h45uq6XG7-omolXhu/view",
      "stack": "Node.js, Inquirer, PostgreSQL",
      "image": ""
    },
    {
      "id": "6",
      "title": "NoSQL: Social Network API",
      "description": "I built a set of APIs for a social network web application where users can share their thoughts, react to friends’ thoughts, and create a friend list. The app follows the MVC paradigm in its architectural structure, using Handlebars.js as the templating language, Sequelize as the ORM, the bcrypt package to hash passwords, and the express-session and connect-session-sequelize npm packages for authentication.",
      "github": "https://github.com/akravt1274/Challenge-Social-Network-API",
      "application": "https://drive.google.com/file/d/1jqhZn1k2b1lgIrfpzVml6QeBC7rAkk6R/view",
      "stack": "Express.js, Mongoose, Sequelize, MVC, Handlebars.js, Bcrypt, Express-session, Connect-session-sequelize",
      "image": ""
    }  
]
